import { rgbPicker } from './colorPickers/rgb.js';
import { cmykPicker } from './colorPickers/cmyk.js';

document.addEventListener('DOMContentLoaded', () => {
    const unifiedColorPickers = (containerId, colorButtonId) => {
        const button = document.getElementById(colorButtonId); 
        let selectedColor = { rgb: null, cmyk: null }; 
        const containerElement = document.getElementById(containerId);

        let rgbPickerElement = rgbPicker();
        let cmykPickerElement = cmykPicker();

        let selectedPicker = 'rgb';

        const getCurrentPicker = () => {
            switch (selectedPicker) {
                case 'rgb':
                    return rgbPickerElement;
                case 'cmyk':
                    return cmykPickerElement;
                default:
                    return null;
            }
        };

        const getCurrentColorValues = () => {
            if (selectedPicker === 'rgb') {
                return {
                    r: rgbPickerElement.querySelector('#red').value,
                    g: rgbPickerElement.querySelector('#green').value,
                    b: rgbPickerElement.querySelector('#blue').value
                };
            } else if (selectedPicker === 'cmyk') {
                return {
                    c: cmykPickerElement.querySelector('#cyan').value,
                    m: cmykPickerElement.querySelector('#magenta').value,
                    y: cmykPickerElement.querySelector('#yellow').value,
                    k: cmykPickerElement.querySelector('#black').value
                };
            }
            return null;
        };

        const switchPickers = async (newPicker) => {
            const currentColorValues = getCurrentColorValues();
        
            // Remove existing pickers
            const pickers = document.querySelectorAll('.colorPickers');
            pickers.forEach(picker => picker.remove());
        
            switch (selectedPicker) {
                case 'rgb':
                    if (newPicker === 'cmyk') {
                        const { r, g, b } = currentColorValues;
                        const cmykColor = rgbToCmyk(r, g, b);
                        await cmyk(cmykColor);
                    } else if (newPicker === 'rgb') {
                        await rgb();
                    }
                    break;
        
                case 'cmyk':
                    if (newPicker === 'rgb') {
                        const { c, m, y, k } = currentColorValues;
                        const rgbColor = cmykToRgb(c, m, y, k);
                        await rgb(rgbColor);
                    } else if (newPicker === 'cmyk') {
                        await cmyk();
                    }
                    break;
        
                default:
                    if (newPicker === 'rgb') {
                        await rgb();
                    } else if (newPicker === 'cmyk') {
                        await cmyk();
                    }
                    break;
            }
        
            selectedPicker = newPicker;
        };
        
        const rgb = async () => {
            containerElement.appendChild(rgbPickerElement);
            function colorName(currentRgbColor) {
                selectedColor.rgb = currentRgbColor;
                console.log(selectedColor.rgb);
            }

            await import('./colorPickerFunctionalities/rgbFunctionality.js')
                .then(module => {
                    module.default(colorName, getCurrentColorValues());
                })
                .catch(error => console.error(error));
        };

        const cmyk = async () => {
            containerElement.appendChild(cmykPickerElement);
            function colorName(currentCmykColor) {
                selectedColor.cmyk = currentCmykColor;
                console.log(selectedColor.cmyk);
            }

            await import('./colorPickerFunctionalities/cmykFunctionality.js')
                .then(module => {
                    module.default(colorName, getCurrentColorValues());
                })
                .catch(error => console.error(error));
        };

        button.addEventListener('click', () => {
            containerElement.classList.toggle('active');

            if (containerElement.classList.contains('active')) {
                containerElement.style.display = 'block';
                switchPickers(selectedPicker);

                const pickerOptions = () => {
                    const activeSection = getCurrentPicker().querySelector('.activeSection');
                    const sections = getCurrentPicker().querySelector('.sections');
                    const options = getCurrentPicker().querySelectorAll('.option');
                    const activeSelection = getCurrentPicker().querySelector('.activeSelection');

                    activeSection.addEventListener('click', () => {
                        sections.classList.toggle('active');
                    });

                    options.forEach(option => {
                        option.addEventListener('click', () => {
                            const newPicker = option.getAttribute('value');
                            activeSelection.innerHTML = `<p>${newPicker}</p>`;
                            sections.classList.remove('active');
                            switchPickers(newPicker);
                            pickerOptions();
                        });
                    });
                };

                pickerOptions();

            } else {
                containerElement.style.display = 'none';
            }
        });
    };

    unifiedColorPickers('wrapper', 'displayColorPicker');
});
