





import { rgbPicker } from './colorPickers/rgb.js';
import { cmykPicker } from './colorPickers/cmyk.js';
import { hslPicker } from './colorPickers/hsl.js';


document.addEventListener('DOMContentLoaded', () => {

 const colorPickers = (container, colorButton)  =>
    {
    const button = document.getElementById(colorButton) 
    let selectedColor = {rgb: null, cmyk:null, hsl:null}
    
    const colorPickers = 
    {
        rgbPickerElement:null ,
        cmykPickerElement:null, 
        hslPickerElement:null
    }
    
    let selectedPicker;
    let initialRgbColor;
    let initialCmykColor;

    
    function getCurrentPicker() {
        if (typeof window[selectedPicker] === "function") {
            return window[selectedPicker]();
        } else {
            console.error(`No function found for selectedPicker: ${selectedPicker}`);
            return null;
        } }
     
    
 const rgb = () =>   
 {
    colorPickers.rgbPickerElement = rgbPicker() ;
    console.log(
        colorPickers.rgbPickerElement )
    const containerElement = document.getElementById(container);
    containerElement.appendChild(colorPickers.rgbPickerElement);
        function colorName(currentHslColor)
    {
        selectedColor.rgb = currentHslColor;
         console.log(selectedColor.rgb);
         initialRgbColor =
         {
                  r : colorPickers.rgbPickerElement.querySelector('#red').value,
                  g : colorPickers.rgbPickerElement.querySelector('#green').value,
                  b : colorPickers.rgbPickerElement.querySelector('#blue').value
        }
                console.log(`initial color ${JSON.stringify(initialRgbColor)}`);
    }
    import('./colorPickerFunctionalities/rgbFunctionality.js').then(moudle =>{
        moudle.default(colorName, initialRgbColor);
    }).catch(error => console.error(error));
    
    return colorPickers.rgbPickerElement
}



const cmyk =  () =>
{ 
    const cmykPickerElement = cmykPicker()
    const containerElement = document.getElementById(container);
    containerElement.appendChild(cmykPickerElement);
    function colorName(currentHslColor) 
    {
        selectedColor.cmyk =  currentHslColor;
        console.log(selectedColor.cmyk);
       initialCmykColor = 
    {
        c : cmykPickerElement.querySelector('#cyan').value,
        m : cmykPickerElement.querySelector('#magenta').value,
        y : cmykPickerElement.querySelector('#yellow').value,
        k : cmykPickerElement.querySelector('#black').value
    }
console.log(`initial color ${JSON.stringify(initialCmykColor)}`);
    
    }
 import('./colorPickerFunctionalities/cmykFunctionality.js').then(moudle =>
       {   moudle.default(colorName, initialCmykColor);
    }).catch(error => console.error(error));
    return cmykPickerElement;
}

const hsl = () =>      
{
    colorPickers.hslPickerElement = hslPicker();

const containerElement = document.getElementById(container);
containerElement.appendChild(colorPickers.hslPickerElement);
function colorName(currentHslColor) {
   selectedColor.hsl = currentHslColor;
}
import('./colorPickerFunctionalities/hslFunctionality.js').then(moudle =>{
    moudle.default(colorName);
}).catch(error => console.error(error));
return colorPickers.hslPickerElement

}

const switchPickers = (coloPicker) =>
    {
        const pickers  = document.querySelectorAll('.colorPickers');
        pickers.forEach(picker =>   picker.remove());
        switch (coloPicker)
        {
            case 'rgb':
            rgb();
            break;
            case 'cmyk':
            cmyk();
            break;
            case 'hsl':
            hsl();
            break;
            default:
               console.log('ehn?');
        }

    };
    

 button.addEventListener('click',  () => {
    const containerElement = document.getElementById(container)
     containerElement.classList.toggle('active');



   if(containerElement.classList.contains('active'))
    {  
        containerElement.style.display = 'block';
         selectedPicker = 'cmyk';
         
         switchPickers(selectedPicker);
  
         const colorPickerOptions = () =>
            {
                const  picker =  getCurrentPicker();
                const sections = picker.querySelector('.sections');
                const options  = picker.querySelectorAll('.option');
                const activeSection = picker.querySelector('.activeSection');
                const activeSelection = picker.querySelector('.activeSelection');
               activeSection.addEventListener('click', () =>{sections.classList.toggle('active')});
        
            options.forEach(option =>{
            option.addEventListener('click', () =>{
             selectedPicker = option.getAttribute('value');
           activeSelection.innerHTML = `<p>${selectedPicker}</p>`;
           sections.classList.remove('active');
           switchPickers(selectedPicker);
           colorPickerOptions();
          });
        });
            }
            colorPickerOptions();

    }else
    {
        containerElement.style.display = 'none'
    }
  
 });
 
 
}
    colorPickers('wrapper', 'displayColorPicker');
});






function returnRgbValues(){

    let rgbValues = { r: 0, g: 0, b: 0 };
       const red = rgbPicker.rgbPickerElement.querySelector('#red')
       const green = rgbPicker.rgbPickerElement.querySelector('#green')
       const blue = rgbPicker.rgbPickerElement.querySelector('#blue')
      let r,g,b 
       !red? console.log('omo no red o'):console.log('yeah there is red'); r = red.value
       !green? console.log('omo no green o'):console.log('yeah there is green'); g = green.value
       !blue? console.log('omo no blue o'):console.log('yeah there is blue'); b = blue.value
   
   
        rgbValues  = {
           r,
          g,
          b
       }
   console.log(rgbValues);
       
       red.addEventListener('input', returnRgbValues);
       green.addEventListener('input', returnRgbValues);
       blue.addEventListener('input', returnRgbValues);
      
       console.log(rgbValues);
    return rgbValues
    }
  
    function returnCmykValues(){
    let cmykValues = {c: 0,m: 0,y: 0,k: 0} 
       
       const cyan = cmykPicker.cmykPickerElement.querySelector('#cyan')
       const magenta = cmykPicker.cmykPickerElement.querySelector('#magenta')
       const yellow = cmykPicker.cmykPickerElement.querySelector('#yellow')
       const black = cmykPicker.cmykPickerElement.querySelector('#black')

      let c,m,y,k  
       !cyan? console.log('omo no cyan o'):console.log('yeah there is cyan'); c = cyan.value
       !magenta? console.log('omo no magenta o'):console.log('yeah there is magenta'); m = magenta.value
       !yellow? console.log('omo no yellow o'):console.log('yeah there is yellow'); y = yellow.value
       !black? console.log('omo no black o'):console.log('yeah there is black'); k = black.value
   
   
        cmykValues  = {
           c,
          m,
          y,
          k
       }
    console.log(cmykValues);
       
       cyan.addEventListener('input', returnCmykValues);
       magenta.addEventListener('input', returnCmykValues);
       yellow.addEventListener('input', returnCmykValues);
       black.addEventListener('input', returnCmykValues);
      
       //console.log(rgbValue);
       return new Promise((resolve, reject) => {
           typeof rgbValues === 'undefined'? reject(console.log('the code is not coding')): resolve(rgbValues);
       });
    }
    
