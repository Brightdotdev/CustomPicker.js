import { rgbPicker } from './colorPickers/rgb.js';
import { cmykPicker } from './colorPickers/cmyk.js';
import { hslPicker } from './colorPickers/hsl.js';
import { rgbToCmykReturnsObject,cmykToRgbReturnsObject } from './colorPickerFunctionalities/colorConversion.js';


document.addEventListener('DOMContentLoaded', () => {

    
    const colorPickers = (containerId, colorButtonId) => {

        const button = document.getElementById(colorButtonId);  
        const containerElement = document.getElementById(containerId);
         let selectedColor = {rgb:null, cmyk:null,hsl:null}
        
        const  rgbPickerElement = rgbPicker();
         let rgbValues =  {
            r: rgbPickerElement.querySelector('#red').value,
            g: rgbPickerElement.querySelector('#green').value,
            b: rgbPickerElement.querySelector('#blue').value
        };

         const cmykPickerElement = cmykPicker();
         const cmykValues =  {
            c: cmykPickerElement.querySelector('#cyan').value,
            m: cmykPickerElement.querySelector('#magenta').value,
            y: cmykPickerElement.querySelector('#yellow').value,
            k: cmykPickerElement.querySelector('#black').value
        };

         let selectedPicker = 'rgb'; 

         

         function getCurrentColorValues() 
         {
             switch (selectedPicker) {
                 case 'rgb':
                     return rgbValues;
                 case 'cmyk':
                     return cmykValues;
                 case 'hsl':
                     return hslValues;
                 default:
                     return null;
             }
         }

        

        function getCurrentPicker() 
        {
            switch (selectedPicker) {
                case 'rgb':
                    return rgbPickerElement;
                case 'cmyk':
                    return cmykPickerElement;/* 
                case 'hsl':
                    return hslPickerElement;*/
                default: 
                    return null;
            }
        }




        const rgb = async () => 
        {
            containerElement.appendChild(rgbPickerElement); 
            function colorName(currentRgbColor) {
                selectedColor.rgb = currentRgbColor;
                console.log(selectedColor.rgb);
                console.log(`initial color ${JSON.stringify(currentRgbColor)}`);
                rgbValues =  {
                    r: rgbPickerElement.querySelector('#red').value,
                    g: rgbPickerElement.querySelector('#green').value,
                    b: rgbPickerElement.querySelector('#blue').value
                }
                console.log(`rgbValues: ${JSON.stringify(rgbValues)}`)
            }
           await  import('./colorPickerFunctionalities/rgbFunctionality.js').then(module => {
                module.default(colorName, rgbValues);
        console.log(cmykValues, rgbValues);
            }).catch(error => console.error(error));
            return rgbValues
        }


        const cmyk = async () => {
            containerElement.appendChild(cmykPickerElement);  
            function colorName(currentCmykColor) {
                selectedColor.cmyk = currentCmykColor;
                console.log(selectedColor.cmyk);
                console.log(`initial color ${JSON.stringify(currentCmykColor)}`);
                console.log(`cmykValues: ${JSON.stringify(cmykValues)}`)

            }

            await  import('./colorPickerFunctionalities/cmykFunctionality.js').then(module => {
                module.default(colorName, cmykValues);
        console.log(cmykValues, rgbValues);
            }).catch(error => console.error(error));
            return cmykValues;
        }

      /*   const hsl = async () => {
            containerElement.appendChild(hslPickerElement); 
            function colorName(currentHslColor) {
                selectedColor.hsl = currentHslColor;
            }
            await import('./colorPickerFunctionalities/hslFunctionality.js').then(module => {
                module.default(colorName);
            }).catch(error => console.error(error));
        }



 */

        const switchPickers = async (newPicker) => {
            const currentColorValues = getCurrentColorValues();
            const pickers = document.querySelectorAll('.colorPickers');
            pickers.forEach(picker => picker.remove()); 
            switch (selectedPicker) {
                case 'rgb':
                 /*   if(newPicker === 'cmyk')
                    {
                        const {r,g,b} = currentColorValues;
                        const cmykColor = rgbToCmykReturnsObject(r,g,b);
                        await cmyk();
                    }else if (newPicker === rgb )
                        {
                            await rgb();
                        } */
                  await rgb()
                    break;
                case 'cmyk':/* 
                    if(newPicker === 'rgb')
                        {
                            const {c,m,y,k} = currentColorValues;
                            const rgbColor = cmykToRgbReturnsObject(c,m,y,k);
                            await rgb();
                        }
                        else if (newPicker === 'cmyk')
                        {
                            await cmyk();
                        } */
                       cmyk()
                    break;
                default:/* 
                    if(newPicker === 'rgb')
                        {
                            await rgb()
                        }
                        else if(newPicker === 'cmyk')
                            {
                                await cmyk();
                            } */
                           console.log('ehn?')
                            break
            }/* 
            selectedPicker = newPicker */
        };

        button.addEventListener('click', () => {
            const containerElement = document.getElementById(containerId);
            containerElement.classList.toggle('active');

            if (containerElement.classList.contains('active')) {
                containerElement.style.display = 'block';
                switchPickers(selectedPicker);


                const colorPickerOptions = () => {
                    const sections = getCurrentPicker().querySelector('.sections');
                    const options = getCurrentPicker().querySelectorAll('.option');
                    const activeSection = getCurrentPicker().querySelector('.activeSection');
                    const activeSelection = getCurrentPicker().querySelector('.activeSelection');

                    activeSection.addEventListener('click', () => {
                        sections.classList.toggle('active');
                    });

                    options.forEach(option => {
                        option.addEventListener('click', () => {
                            const newPicker = option.getAttribute('value');
                            activeSelection.innerHTML = `<p>${newPicker}</p>`;
                            sections.classList.remove('active');
                            switchPickers(newPicker);
                            colorPickerOptions();
                        });
                    });
                }

                colorPickerOptions();

            } else {
                containerElement.style.display = 'none';
            }
        });
    }


    colorPickers('wrapper', 'displayColorPicker');
});
